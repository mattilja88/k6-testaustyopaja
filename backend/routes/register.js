const express = require('express');
const router = express.Router();
const db = require('../db');

router.post('/', async (req, res) => {
  console.log("üì• Saapuva data:", req.body);

  const { fname, lname, uname, email, password, address, phone } = req.body;

  if (!fname || !lname || !uname || !email || !password) {
    return res.status(400).json({ message: 'T√§yt√§ kaikki vaaditut kent√§t' });
  }

  // üìß S√§hk√∂postin validointi
  // regex testaus avattuna:
  // ensin testaa, ett√§ yksi tai useampi merkki, joka ei ole v√§lily√∂nti tai @-merkki
  // t√§m√§n j√§lkeen t√§ytyy olla @-merkki eik√§ mik√§√§n muu
  // Sitten on pakollinen v√§hint√§√§n yksi merkki, joka ei ole v√§lily√∂nti eik√§ @-merkki
  // seuraavaksi pakollinen piste. 
  // lopuksi taas pakollinen merkki, joka ei ole v√§lily√∂nti tai @-merkki
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: 'S√§hk√∂postiosoite ei ole kelvollinen' });
  }

  // üîê Salasanan tarkistus
  const hasUpper = /[A-Z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSpecial = /[^A-Za-z0-9]/.test(password);

  if (!hasUpper || !hasNumber || !hasSpecial) {
    return res.status(400).json({
      message: 'Salasanan tulee sis√§lt√§√§ v√§hint√§√§n yksi iso kirjain, numero ja erikoismerkki'
    });
  }

  try {
    const conn = await db.getConnection();

    const [existing] = await conn.query(
      'SELECT id FROM users WHERE uname = ? OR email = ?',
      [uname, email]
    );

    if (existing.length > 0) {
      conn.release();
      return res.status(409).json({ message: 'K√§ytt√§j√§nimi tai s√§hk√∂posti on jo k√§yt√∂ss√§' });
    }

    const [result] = await conn.query(
      'INSERT INTO users (fname, lname, uname, email, password, address, phone) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [fname, lname, uname, email, password, address || null, phone || null]
    );

    conn.release();
    return res.status(201).json({ message: 'Rekister√∂inti onnistui', userId: result.insertId });

  } catch (err) {
    console.error("üí• Virhe palvelimella:", err);
    return res.status(500).json({ message: 'Jotain meni pieleen palvelimen puolella' });
  }
});

module.exports = router;
